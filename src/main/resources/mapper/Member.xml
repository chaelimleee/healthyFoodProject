<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.Member">

	<!-- 0401 leee 수정 완. -->

	<!-- 회원 정보 생성 -->
	<insert id="insertMember" parameterType="com.javateam.healthyFoodProject.domain.MemberDTO">
		INSERT INTO member_tbl(
			MEMBER_EMAIL,
	        MEMBER_PW,
	        MEMBER_NAME,
	        MEMBER_NICK,
	        MEMBER_MOBILE,
	        MEMBER_BIRTH,
	        MEMBER_ZIP,
	        MEMBER_ADDRESS1,
	        MEMBER_ADDRESS2
   		 ) VALUES (
			#{memberEmail},
			#{memberPw},
			#{memberName},
			#{memberNick},
			#{memberMobile},
			#{memberBirthAll},
			#{memberZip},
			#{memberAddress1},
			#{memberAddress2}
		)
	</insert>
	  
	<!-- 회원 정보 롤(role) 생성 -->
	<insert id="insertRole" parameterType="com.javateam.healthyFoodProject.domain.Role">
		INSERT INTO user_roles VALUES (
		user_roles_seq.nextval,
		#{username},
		#{role})
	</insert>
	
	<!-- 아이디/이메일/휴대폰 존재여부(중복) 점검 -->
	<select id="hasFld" parameterType="map" resultType="int">
		SELECT count(*) FROM member_tbl WHERE ${fld} = #{val} 
	</select> 
	
	<!-- 회원 정보 조회 -->
	<select id="selectMember" parameterType="String"
		    resultType="com.javateam.healthyFoodProject.domain.MemberDTO">
		SELECT 
		MEMBER_EMAIL as "memberEmail",
		MEMBER_PW as "memberPw",
		MEMBER_NAME as "memberName",
		MEMBER_NICK as "memberNick",	
		MEMBER_MOBILE as "memberMobile",
		MEMBER_BIRTH as "memberBirth",
		MEMBER_ZIP as "memberZip",
		MEMBER_ADDRESS1 as "memberAddress1",
		MEMBER_ADDRESS2 as "memberAddress2",
		MEMBER_IMG as "memberImg",
		MEMBER_IMG_ORIGIN as "memberImgOrigin",
		MEMBER_DATE as "memberDate",		
		MEMBER_ROLE as "memberRole",
		ENABLED as "enabled"
		FROM member_tbl WHERE MEMBER_EMAIL = #{memberEmail}
	</select>
	
	<!-- 아이디/이메일/휴대폰 존재여부(중복) 점검 : 회원 정보 수정 -->
	<select id="hasFldForUpdate" parameterType="map" resultType="int">
		SELECT COUNT(*) FROM (
		        SELECT ${fld} FROM member_tbl
		        WHERE MEMBER_EMAIL != #{id}
		    )
		WHERE ${fld} = #{val}
	</select>
	
	<!-- 회원 정보 수정 -->
	<!-- 동적 SQL 추가(조거/선택적 update)
	     동적 SQL : https://mybatis.org/mybatis-3/ko/dynamic-sql.html#trim-where-set -->
	<update id="updateMember" 
			parameterType="com.javateam.healthyFoodProject.domain.MemberDTO">
		UPDATE member_tbl
		<set>
			<if test="memberPw != null">password = #{password},</if>
			<if test="memberNick != null">memberNick = #{memberNick},</if>
			<if test="memberMobile != null">memberMobile = #{memberMobile},</if>
			<if test="memberZip != null">memberZip = #{memberZip},</if>
			<if test="memberAddress1 != null">memberAddress1 = #{memberAddress1},</if>
			<if test="memberAddress2 != null">memberAddress2 = #{memberAddress2},</if>
			<if test="memberImg != null">memberImg = #{memberImg},</if>
		</set>
		WHERE MEMBER_EMAIL = #{id}
	</update>

	<!-- 전체 회원 수 -->
	<select id="selectMembersCount" resultType="int">
		SELECT COUNT(*) FROM member_tbl
	</select>
	
	<!-- 전체 회원 정보 조회 (페이징) -->
	<select id="selectMembersByPaging" parameterType="map" 
			resultType="com.javateam.healthyFoodProject.domain.MemberDTO">
		SELECT  
				MEMBER_EMAIL as "memberEmail",
				MEMBER_PW as "memberPw",
				MEMBER_NAME as "memberName",
				MEMBER_NICK as "memberNick",	
				MEMBER_MOBILE as "memberMobile",
				MEMBER_BIRTH as "memberBirth",
				MEMBER_ZIP as "memberZip",
				MEMBER_ADDRESS1 as "memberAddress1",
				MEMBER_ADDRESS2 as "memberAddress2",
				MEMBER_IMG as "memberImg",
				MEMBER_IMG_ORIGIN as "memberImgOrigin",
				MEMBER_DATE as "memberDate",		
				MEMBER_ROLE as "memberRole",
				ENABLED as "enabled"
		FROM (SELECT m.*,  
		             FLOOR((ROWNUM - 1) / ${limit} + 1) page  
		      FROM (
		             SELECT *
					 FROM member_tbl					 
		             ORDER BY memberEmail DESC
		           ) m  
		      )  
		WHERE page = #{page}
	</select>
	
	<!-- 전체 회원 정보 조회 (페이징) : 아이디  중심 내림차순 정렬 -->
	<select id="selectMembersWithRolesByPaging" parameterType="map" resultType="map">
		SELECT  *
		FROM (SELECT m.*,  
		             FLOOR((ROWNUM - 1) / ${limit} + 1) page  
		      FROM (
			      	 SELECT 
			      	 DISTINCT m.*,
					 (
					    SELECT LISTAGG(r2.role, ',') WITHIN GROUP (ORDER BY m2.MEMBER_EMAIL) 
					    FROM member_tbl m2, user_roles r2  
					    WHERE r2.username = m2.MEMBER_EMAIL
					    AND r2.username = m.MEMBER_EMAIL
					 ) AS "ROLE"           
					 FROM member_tbl m, user_roles r
					 WHERE m.MEMBER_EMAIL = r.username
		             ORDER BY MEMBER_EMAIL DESC
		          ) m  
		      )  
		WHERE page = #{page}
	</select>
	
	<!-- 회원 롤 조회 -->
	<select id="selectRolesById" parameterType="String" resultType="String">
		SELECT role FROM user_roles WHERE username = #{id}
	</select>
	
	<!-- 회원 롤 삭제 -->
	<delete id="deleteRoleById" parameterType="map">
		DELETE FROM user_roles 
		WHERE username = #{id} AND role = #{role}
	</delete>
	
	<!-- 회원 롤(들)삭제 -->
	<delete id="deleteRolesById" parameterType="String">
		DELETE FROM user_roles WHERE username = #{username}
	</delete>
	
	<!-- 회원 정보 삭제 -->
	<delete id="deleteMemberById" parameterType="map">
		DELETE FROM member_tbl WHERE MEMBER_EMAIL = #{email}
	</delete>
	
	<!-- 검색 회원 정보 수 -->
	<select id="selectMembersCountBySearching" parameterType="map" resultType="int">
		SELECT COUNT(*) FROM 
		<if test="searchKey == 'role'">
		user_roles
		</if>
		<if test="searchKey != 'role'">
		member_tbl 
		</if>
		WHERE
		<if test="searchKey == 'address'">
			MEMBER_ADDRESS1 like '%${searchWord}%' 
	   		OR MEMBER_ADDRESS2 like '%${searchWord}%'
  		</if>
  		<if test="searchKey == 'name' and searchKey != 'address'">
			 MEMBER_NAME like '%${searchWord}%'
   		 </if>
  		<if test="searchKey != 'name' and searchKey != 'address'">
			${searchKey} = #{searchWord}
  		</if>
	</select>
	
	<!-- 멤버 롤 빼도될 듯. 여기서 합쳐짐. -->
	<!-- 회원 정보 키워드 검색(조회) (페이징) : 아이디 중심 내림차순 정렬 -->
	<select id="selectMembersWithRolesBySearching" parameterType="map" resultType="map">
		SELECT  
				MEMBER_EMAIL,
				MEMBER_PW ,
				MEMBER_NAME ,
				MEMBER_NICK ,	
				MEMBER_MOBILE ,
				MEMBER_BIRTH ,
				MEMBER_ZIP ,
				MEMBER_ADDRESS1 ,
				MEMBER_ADDRESS2 ,
				MEMBER_IMG ,
				MEMBER_IMG_ORIGIN ,
				MEMBER_DATE ,	
				ENABLED ,
				role,
		        page   
		FROM (SELECT m.*,  
		             FLOOR((ROWNUM - 1) / ${limit} + 1) page  
		      FROM (
			      	 SELECT 
			      	 DISTINCT m.*,
					 (
					    SELECT LISTAGG(r2.role, ',') WITHIN GROUP (ORDER BY m2.MEMBER_EMAIL) 
					    FROM member_tbl m2, user_roles r2  
					    WHERE r2.username = m2.MEMBER_EMAIL
					    AND r2.username = m.MEMBER_EMAIL
					 ) AS "ROLE"           
					 FROM member_tbl m, user_roles r
					 WHERE m.MEMBER_EMAIL = r.username
					 <if test="searchKey == 'address'">
						 AND MEMBER_ADDRESS1 like '%${searchWord}%'
						 OR MEMBER_ADDRESS2 like '%${searchWord}%'
		    		 </if>
		    		 <if test="searchKey == 'name' and searchKey != 'address'">
						 AND MEMBER_NAME like '%${searchWord}%'
		    		 </if>
		    		 <if test="searchKey != 'name' and searchKey != 'address'">
						 AND ${searchKey} = #{searchWord}
		    		 </if>
		             ORDER BY id DESC
		          ) m  
		      )  
		WHERE page = #{page}
	</select>
	
	<!-- 회원 활동/휴면  상태(enabled) 변경 -->
	<update id="changeEnabled" parameterType="map">
		UPDATE member_tbl SET ENABLED = #{enabled} 
		WHERE MEMBER_EMAIL = #{id}
	</update>	
	
	<!-- 아이디 중복체크 khk -->
   <!--  <select id="emailCheck" parameterType="MemberDTO" resultType="int">
		SELECT COUNT(*)
		FROM MEMBER_TBL
		WHERE MEMBER_EMAIL = #{id}
	</select> -->
	
</mapper>